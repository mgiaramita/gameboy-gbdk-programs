                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : FreeWare ANSI-C Compiler
                              3 ; Version 2.3.1 Fri Sep 15 12:37:45 2017
                              4 
                              5 ;--------------------------------------------------------
                              6 	.module lcc196730
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _main
                             12 	.globl _cursor
                             13 	.globl _y
                             14 	.globl _x
                             15 	.globl _setupCursor
                             16 	.globl _controlCursor
                             17 	.globl _moveCursor
                             18 ;--------------------------------------------------------
                             19 ; special function registers
                             20 ;--------------------------------------------------------
                             21 ;--------------------------------------------------------
                             22 ; special function bits 
                             23 ;--------------------------------------------------------
                             24 ;--------------------------------------------------------
                             25 ; internal ram data
                             26 ;--------------------------------------------------------
                             27 	.area _DATA
   0000                      28 _x::
   0000                      29 	.ds 1
   0001                      30 _y::
   0001                      31 	.ds 1
   0002                      32 _cursor::
   0002                      33 	.ds 128
                             34 ;--------------------------------------------------------
                             35 ; overlayable items in internal ram 
                             36 ;--------------------------------------------------------
                             37 	.area _OVERLAY
                             38 ;--------------------------------------------------------
                             39 ; indirectly addressable internal ram data
                             40 ;--------------------------------------------------------
                             41 	.area _ISEG
                             42 ;--------------------------------------------------------
                             43 ; bit data
                             44 ;--------------------------------------------------------
                             45 	.area _BSEG
                             46 ;--------------------------------------------------------
                             47 ; external ram data
                             48 ;--------------------------------------------------------
                             49 	.area _XSEG
                             50 ;--------------------------------------------------------
                             51 ; global & static initialisations
                             52 ;--------------------------------------------------------
                             53 	.area _GSINIT
                             54 	.area _GSFINAL
                             55 	.area _GSINIT
                             56 ;	movecursor.c 97
                             57 ;	movecursor.c 116
                             58 ;	genArrayInit
                             59 ; _saveRegsForCall: sendSetSize: 0 deInUse: 0 bcInUse: 0 deSending: 0
   0000 21 02 00             60 	ld	hl,#_cursor
   0003 CD 00 00             61 	call	__initrleblock
   0006 7F                   62 	.db	127
   0007 10 10 10 10 28 38    63 	.db	0x10, 0x10, 0x10, 0x10, 0x28, 0x38, 0x24, 0x3C
        24 3C
   000F 24 3C 42 7E 5A 7E    64 	.db	0x24, 0x3C, 0x42, 0x7E, 0x5A, 0x7E, 0x66, 0x66
        66 66
   0017 00 00 E0 E0 9C FC    65 	.db	0x00, 0x00, 0xE0, 0xE0, 0x9C, 0xFC, 0x43, 0x7F
        43 7F
   001F 44 7C 98 F8 E0 E0    66 	.db	0x44, 0x7C, 0x98, 0xF8, 0xE0, 0xE0, 0x00, 0x00
        00 00
   0027 66 66 5A 7E 42 7E    67 	.db	0x66, 0x66, 0x5A, 0x7E, 0x42, 0x7E, 0x24, 0x3C
        24 3C
   002F 24 3C 14 1C 08 08    68 	.db	0x24, 0x3C, 0x14, 0x1C, 0x08, 0x08, 0x08, 0x08
        08 08
   0037 00 00 07 07 19 1F    69 	.db	0x00, 0x00, 0x07, 0x07, 0x19, 0x1F, 0x22, 0x3E
        22 3E
   003F C2 FE 39 3F 07 07    70 	.db	0xC2, 0xFE, 0x39, 0x3F, 0x07, 0x07, 0x00, 0x00
        00 00
   0047 00 00 80 80 70 70    71 	.db	0x00, 0x00, 0x80, 0x80, 0x70, 0x70, 0x4E, 0x7E
        4E 7E
   004F 21 3F 12 1E 14 1C    72 	.db	0x21, 0x3F, 0x12, 0x1E, 0x14, 0x1C, 0x08, 0x08
        08 08
   0057 02 02 0C 0C 14 1C    73 	.db	0x02, 0x02, 0x0C, 0x0C, 0x14, 0x1C, 0x64, 0x7C
        64 7C
   005F 88 F8 48 78 28 38    74 	.db	0x88, 0xF8, 0x48, 0x78, 0x28, 0x38, 0x10, 0x10
        10 10
   0067 10 10 28 38 48 78    75 	.db	0x10, 0x10, 0x28, 0x38, 0x48, 0x78, 0x84, 0xFC
        84 FC
   006F 72 7E 0E 0E 01 01    76 	.db	0x72, 0x7E, 0x0E, 0x0E, 0x01, 0x01, 0x00, 0x00
        00 00
   0077 08 08 14 1C 12 1E    77 	.db	0x08, 0x08, 0x14, 0x1C, 0x12, 0x1E, 0x11, 0x1F
        11 1F
   007F 26 3E 28 38 30 30    78 	.db	0x26, 0x3E, 0x28, 0x38, 0x30, 0x30, 0x40
        40
   0086 01                   79 	.db	1
   0087 40                   80 	.db	0x40
   0088 00                   81 	.db	0
                             82 ;--------------------------------------------------------
                             83 ; Home
                             84 ;--------------------------------------------------------
                             85 	.area _HOME
                             86 	.area _CODE
                             87 ;--------------------------------------------------------
                             88 ; code
                             89 ;--------------------------------------------------------
                             90 	.area _CODE
                             91 ;	movecursor.c 25
                             92 ;	genLabel
                             93 ;	genFunction
                             94 ;	---------------------------------
                             95 ; Function main
                             96 ; ---------------------------------
   0000                      97 ___main_start:
   0000                      98 _main:
   0000 E8 FD                99 	lda	sp,-3(sp)
                            100 ;	movecursor.c 27
                            101 ;	genIpush
                            102 ; _saveRegsForCall: sendSetSize: 0 deInUse: 0 bcInUse: 0 deSending: 0
   0002 21 34 00            103 	ld	hl,#__str_0
   0005 E5                  104 	push	hl
                            105 ;	genCall
   0006 CD 00 00            106 	call	_printf
   0009 E8 02               107 	lda	sp,2(sp)
                            108 ;	movecursor.c 29
                            109 ;	genAssign
                            110 ;	AOP_HL for _x
   000B 21 00 00            111 	ld	hl,#_x
   000E 36 4B               112 	ld	(hl),#0x4B
                            113 ;	movecursor.c 30
                            114 ;	genAssign
                            115 ;	AOP_HL for _y
   0010 21 01 00            116 	ld	hl,#_y
   0013 36 4B               117 	ld	(hl),#0x4B
                            118 ;	movecursor.c 32
                            119 ;	genCall
                            120 ; _saveRegsForCall: sendSetSize: 0 deInUse: 0 bcInUse: 0 deSending: 0
   0015 CD 4B 00            121 	call	_setupCursor
                            122 ;	movecursor.c 34
                            123 ;	genAssign
   0018 01 40 FF            124 	ld	bc,#0xFF40
                            125 ;	genAssign
                            126 ;	AOP_STK for _main_sloc0_1_0
   001B F8 01               127 	lda	hl,1(sp)
   001D 36 40               128 	ld	(hl),#0x40
   001F 23                  129 	inc	hl
   0020 36 FF               130 	ld	(hl),#0xFF
                            131 ;	genPointerGet
                            132 ;	AOP_STK for _main_sloc0_1_0
                            133 ;	AOP_STK for _main_sloc1_1_0
   0022 2B                  134 	dec	hl
   0023 5E                  135 	ld	e,(hl)
   0024 23                  136 	inc	hl
   0025 56                  137 	ld	d,(hl)
   0026 1A                  138 	ld	a,(de)
   0027 2B                  139 	dec	hl
   0028 2B                  140 	dec	hl
                            141 ;	genOr
                            142 ;	AOP_STK for _main_sloc1_1_0
   0029 77                  143 	ld      (hl),a
   002A 7F                  144 	ld      a,a
   002B F6 02               145 	or	a,#0x02
                            146 ;	genAssign (pointer)
   002D 02                  147 	ld	(bc),a
                            148 ;	movecursor.c 36
                            149 ;	genCall
                            150 ; _saveRegsForCall: sendSetSize: 0 deInUse: 0 bcInUse: 0 deSending: 0
   002E CD 91 00            151 	call	_controlCursor
                            152 ;	genLabel
   0031                     153 00101$:
                            154 ;	genEndFunction
   0031 E8 03               155 	lda	sp,3(sp)
   0033 C9                  156 	ret
   0034                     157 ___main_end:
   0034                     158 __str_0:
   0034 47 61 6D 65 42 6F   159 	.ascii "GameBoy Cursor Demo!"
        79 20 43 75 72 73
        6F 72 20 44 65 6D
        6F 21
   0048 0A                  160 	.db 0x0A
   0049 0A                  161 	.db 0x0A
   004A 00                  162 	.db 0x00
                            163 ;	movecursor.c 39
                            164 ;	genLabel
                            165 ;	genFunction
                            166 ;	---------------------------------
                            167 ; Function setupCursor
                            168 ; ---------------------------------
   004B                     169 ___setupCursor_start:
   004B                     170 _setupCursor:
   004B E8 FD               171 	lda	sp,-3(sp)
                            172 ;	movecursor.c 40
                            173 ;	genAssign
   004D 01 40 FF            174 	ld	bc,#0xFF40
                            175 ;	genAssign
                            176 ;	AOP_STK for _setupCursor_sloc0_1_0
   0050 F8 01               177 	lda	hl,1(sp)
   0052 36 40               178 	ld	(hl),#0x40
   0054 23                  179 	inc	hl
   0055 36 FF               180 	ld	(hl),#0xFF
                            181 ;	genPointerGet
                            182 ;	AOP_STK for _setupCursor_sloc0_1_0
                            183 ;	AOP_STK for _setupCursor_sloc1_1_0
   0057 2B                  184 	dec	hl
   0058 5E                  185 	ld	e,(hl)
   0059 23                  186 	inc	hl
   005A 56                  187 	ld	d,(hl)
   005B 1A                  188 	ld	a,(de)
   005C 2B                  189 	dec	hl
   005D 2B                  190 	dec	hl
                            191 ;	genAnd
                            192 ;	AOP_STK for _setupCursor_sloc1_1_0
   005E 77                  193 	ld      (hl),a
   005F 7F                  194 	ld      a,a
   0060 E6 FB               195 	and	a,#0xFB
                            196 ;	genAssign (pointer)
   0062 02                  197 	ld	(bc),a
                            198 ;	movecursor.c 43
                            199 ;	genIpush
                            200 ; _saveRegsForCall: sendSetSize: 0 deInUse: 0 bcInUse: 0 deSending: 0
   0063 21 02 00            201 	ld	hl,#_cursor
   0066 E5                  202 	push	hl
                            203 ;	genIpush
   0067 21 00 08            204 	ld	hl,#0x0800
   006A E5                  205 	push	hl
                            206 ;	genCall
   006B CD 00 00            207 	call	_set_sprite_data
   006E E8 04               208 	lda	sp,4(sp)
                            209 ;	movecursor.c 46
                            210 ;	genIpush
                            211 ; _saveRegsForCall: sendSetSize: 0 deInUse: 0 bcInUse: 0 deSending: 0
   0070 21 00 00            212 	ld	hl,#0x0000
   0073 E5                  213 	push	hl
                            214 ;	genCall
   0074 CD 00 00            215 	call	_set_sprite_tile
   0077 E8 02               216 	lda	sp,2(sp)
                            217 ;	movecursor.c 49
                            218 ;	genIpush
                            219 ; _saveRegsForCall: sendSetSize: 0 deInUse: 0 bcInUse: 0 deSending: 0
                            220 ;	AOP_HL for _y
   0079 21 01 00            221 	ld	hl,#_y
   007C 7E                  222 	ld	a,(hl)
   007D F5                  223 	push	af
   007E 33                  224 	inc	sp
                            225 ;	genIpush
                            226 ;	AOP_HL for _x
   007F 21 00 00            227 	ld	hl,#_x
   0082 7E                  228 	ld	a,(hl)
   0083 F5                  229 	push	af
   0084 33                  230 	inc	sp
                            231 ;	genIpush
   0085 3E 00               232 	ld	a,#0x00
   0087 F5                  233 	push	af
   0088 33                  234 	inc	sp
                            235 ;	genCall
   0089 CD 00 00            236 	call	_move_sprite
   008C E8 03               237 	lda	sp,3(sp)
                            238 ;	genLabel
   008E                     239 00101$:
                            240 ;	genEndFunction
   008E E8 03               241 	lda	sp,3(sp)
   0090 C9                  242 	ret
   0091                     243 ___setupCursor_end:
                            244 ;	movecursor.c 52
                            245 ;	genLabel
                            246 ;	genFunction
                            247 ;	---------------------------------
                            248 ; Function controlCursor
                            249 ; ---------------------------------
   0091                     250 ___controlCursor_start:
   0091                     251 _controlCursor:
                            252 	
                            253 ;	movecursor.c 53
                            254 ;	genLabel
   0091                     255 00111$:
                            256 ;	movecursor.c 54
                            257 ;	genCall
                            258 ; _saveRegsForCall: sendSetSize: 0 deInUse: 0 bcInUse: 0 deSending: 0
   0091 CD 00 00            259 	call	_joypad
   0094 4B                  260 	ld	c,e
                            261 ;	genCmpEq
                            262 ; genCmpEq: left 1, right 1, result 0
   0095 79                  263 	ld	a,c
   0096 FE 01               264 	cp	a,#0x01
   0098 CA F8 00            265 	jp	z,00104$
   009B                     266 00124$:
                            267 ;	genCmpEq
                            268 ; genCmpEq: left 1, right 1, result 0
   009B 79                  269 	ld	a,c
   009C FE 02               270 	cp	a,#0x02
   009E CA E8 00            271 	jp	z,00103$
   00A1                     272 00125$:
                            273 ;	genCmpEq
                            274 ; genCmpEq: left 1, right 1, result 0
   00A1 79                  275 	ld	a,c
   00A2 FE 04               276 	cp	a,#0x04
   00A4 CA C8 00            277 	jp	z,00101$
   00A7                     278 00126$:
                            279 ;	genCmpEq
                            280 ; genCmpEq: left 1, right 1, result 0
   00A7 79                  281 	ld	a,c
   00A8 FE 05               282 	cp	a,#0x05
   00AA CA 1C 01            283 	jp	z,00106$
   00AD                     284 00127$:
                            285 ;	genCmpEq
                            286 ; genCmpEq: left 1, right 1, result 0
   00AD 79                  287 	ld	a,c
   00AE FE 06               288 	cp	a,#0x06
   00B0 CA 08 01            289 	jp	z,00105$
   00B3                     290 00128$:
                            291 ;	genCmpEq
                            292 ; genCmpEq: left 1, right 1, result 0
   00B3 79                  293 	ld	a,c
   00B4 FE 08               294 	cp	a,#0x08
   00B6 CA D8 00            295 	jp	z,00102$
   00B9                     296 00129$:
                            297 ;	genCmpEq
                            298 ; genCmpEq: left 1, right 1, result 0
   00B9 79                  299 	ld	a,c
   00BA FE 09               300 	cp	a,#0x09
   00BC CA 44 01            301 	jp	z,00108$
   00BF                     302 00130$:
                            303 ;	genCmpEq
                            304 ; genCmpEq: left 1, right 1, result 0
   00BF 79                  305 	ld	a,c
   00C0 FE 0A               306 	cp	a,#0x0A
   00C2 CA 30 01            307 	jp	z,00107$
   00C5                     308 00131$:
                            309 ;	genGoto
   00C5 C3 91 00            310 	jp	00111$
                            311 ;	movecursor.c 56
                            312 ;	genLabel
   00C8                     313 00101$:
                            314 ;	genMinus
                            315 ;	AOP_HL for _y
   00C8 21 01 00            316 	ld	hl,#_y
   00CB 35                  317 	dec	(hl)
                            318 ;	movecursor.c 57
                            319 ;	genIpush
                            320 ; _saveRegsForCall: sendSetSize: 0 deInUse: 0 bcInUse: 0 deSending: 0
   00CC 3E 00               321 	ld	a,#0x00
   00CE F5                  322 	push	af
   00CF 33                  323 	inc	sp
                            324 ;	genCall
   00D0 CD 59 01            325 	call	_moveCursor
   00D3 E8 01               326 	lda	sp,1(sp)
                            327 ;	movecursor.c 58
                            328 ;	genGoto
   00D5 C3 91 00            329 	jp	00111$
                            330 ;	movecursor.c 60
                            331 ;	genLabel
   00D8                     332 00102$:
                            333 ;	genPlus
                            334 ;	AOP_HL for _y
                            335 ;	genPlusIncr
   00D8 21 01 00            336 	ld	hl,#_y
   00DB 34                  337 	inc	(hl)
                            338 ;	movecursor.c 61
                            339 ;	genIpush
                            340 ; _saveRegsForCall: sendSetSize: 0 deInUse: 0 bcInUse: 0 deSending: 0
   00DC 3E 02               341 	ld	a,#0x02
   00DE F5                  342 	push	af
   00DF 33                  343 	inc	sp
                            344 ;	genCall
   00E0 CD 59 01            345 	call	_moveCursor
   00E3 E8 01               346 	lda	sp,1(sp)
                            347 ;	movecursor.c 62
                            348 ;	genGoto
   00E5 C3 91 00            349 	jp	00111$
                            350 ;	movecursor.c 64
                            351 ;	genLabel
   00E8                     352 00103$:
                            353 ;	genMinus
                            354 ;	AOP_HL for _x
   00E8 21 00 00            355 	ld	hl,#_x
   00EB 35                  356 	dec	(hl)
                            357 ;	movecursor.c 65
                            358 ;	genIpush
                            359 ; _saveRegsForCall: sendSetSize: 0 deInUse: 0 bcInUse: 0 deSending: 0
   00EC 3E 03               360 	ld	a,#0x03
   00EE F5                  361 	push	af
   00EF 33                  362 	inc	sp
                            363 ;	genCall
   00F0 CD 59 01            364 	call	_moveCursor
   00F3 E8 01               365 	lda	sp,1(sp)
                            366 ;	movecursor.c 66
                            367 ;	genGoto
   00F5 C3 91 00            368 	jp	00111$
                            369 ;	movecursor.c 68
                            370 ;	genLabel
   00F8                     371 00104$:
                            372 ;	genPlus
                            373 ;	AOP_HL for _x
                            374 ;	genPlusIncr
   00F8 21 00 00            375 	ld	hl,#_x
   00FB 34                  376 	inc	(hl)
                            377 ;	movecursor.c 69
                            378 ;	genIpush
                            379 ; _saveRegsForCall: sendSetSize: 0 deInUse: 0 bcInUse: 0 deSending: 0
   00FC 3E 01               380 	ld	a,#0x01
   00FE F5                  381 	push	af
   00FF 33                  382 	inc	sp
                            383 ;	genCall
   0100 CD 59 01            384 	call	_moveCursor
   0103 E8 01               385 	lda	sp,1(sp)
                            386 ;	movecursor.c 70
                            387 ;	genGoto
   0105 C3 91 00            388 	jp	00111$
                            389 ;	movecursor.c 72
                            390 ;	genLabel
   0108                     391 00105$:
                            392 ;	genMinus
                            393 ;	AOP_HL for _x
   0108 21 00 00            394 	ld	hl,#_x
   010B 35                  395 	dec	(hl)
                            396 ;	genMinus
                            397 ;	AOP_HL for _y
   010C 21 01 00            398 	ld	hl,#_y
   010F 35                  399 	dec	(hl)
                            400 ;	movecursor.c 73
                            401 ;	genIpush
                            402 ; _saveRegsForCall: sendSetSize: 0 deInUse: 0 bcInUse: 0 deSending: 0
   0110 3E 04               403 	ld	a,#0x04
   0112 F5                  404 	push	af
   0113 33                  405 	inc	sp
                            406 ;	genCall
   0114 CD 59 01            407 	call	_moveCursor
   0117 E8 01               408 	lda	sp,1(sp)
                            409 ;	movecursor.c 74
                            410 ;	genGoto
   0119 C3 91 00            411 	jp	00111$
                            412 ;	movecursor.c 76
                            413 ;	genLabel
   011C                     414 00106$:
                            415 ;	genPlus
                            416 ;	AOP_HL for _x
                            417 ;	genPlusIncr
   011C 21 00 00            418 	ld	hl,#_x
   011F 34                  419 	inc	(hl)
                            420 ;	genMinus
                            421 ;	AOP_HL for _y
   0120 21 01 00            422 	ld	hl,#_y
   0123 35                  423 	dec	(hl)
                            424 ;	movecursor.c 77
                            425 ;	genIpush
                            426 ; _saveRegsForCall: sendSetSize: 0 deInUse: 0 bcInUse: 0 deSending: 0
   0124 3E 05               427 	ld	a,#0x05
   0126 F5                  428 	push	af
   0127 33                  429 	inc	sp
                            430 ;	genCall
   0128 CD 59 01            431 	call	_moveCursor
   012B E8 01               432 	lda	sp,1(sp)
                            433 ;	movecursor.c 78
                            434 ;	genGoto
   012D C3 91 00            435 	jp	00111$
                            436 ;	movecursor.c 80
                            437 ;	genLabel
   0130                     438 00107$:
                            439 ;	genMinus
                            440 ;	AOP_HL for _x
   0130 21 00 00            441 	ld	hl,#_x
   0133 35                  442 	dec	(hl)
                            443 ;	genPlus
                            444 ;	AOP_HL for _y
                            445 ;	genPlusIncr
   0134 21 01 00            446 	ld	hl,#_y
   0137 34                  447 	inc	(hl)
                            448 ;	movecursor.c 81
                            449 ;	genIpush
                            450 ; _saveRegsForCall: sendSetSize: 0 deInUse: 0 bcInUse: 0 deSending: 0
   0138 3E 07               451 	ld	a,#0x07
   013A F5                  452 	push	af
   013B 33                  453 	inc	sp
                            454 ;	genCall
   013C CD 59 01            455 	call	_moveCursor
   013F E8 01               456 	lda	sp,1(sp)
                            457 ;	movecursor.c 82
                            458 ;	genGoto
   0141 C3 91 00            459 	jp	00111$
                            460 ;	movecursor.c 84
                            461 ;	genLabel
   0144                     462 00108$:
                            463 ;	genPlus
                            464 ;	AOP_HL for _x
                            465 ;	genPlusIncr
   0144 21 00 00            466 	ld	hl,#_x
   0147 34                  467 	inc	(hl)
                            468 ;	genPlus
                            469 ;	AOP_HL for _y
                            470 ;	genPlusIncr
   0148 21 01 00            471 	ld	hl,#_y
   014B 34                  472 	inc	(hl)
                            473 ;	movecursor.c 85
                            474 ;	genIpush
                            475 ; _saveRegsForCall: sendSetSize: 0 deInUse: 0 bcInUse: 0 deSending: 0
   014C 3E 06               476 	ld	a,#0x06
   014E F5                  477 	push	af
   014F 33                  478 	inc	sp
                            479 ;	genCall
   0150 CD 59 01            480 	call	_moveCursor
   0153 E8 01               481 	lda	sp,1(sp)
                            482 ;	movecursor.c 87
                            483 ;	genGoto
   0155 C3 91 00            484 	jp	00111$
                            485 ;	genLabel
   0158                     486 00113$:
                            487 ;	genEndFunction
                            488 	
   0158 C9                  489 	ret
   0159                     490 ___controlCursor_end:
                            491 ;	movecursor.c 91
                            492 ;	genLabel
                            493 ;	genFunction
                            494 ;	---------------------------------
                            495 ; Function moveCursor
                            496 ; ---------------------------------
   0159                     497 ___moveCursor_start:
   0159                     498 _moveCursor:
                            499 	
                            500 ;	movecursor.c 92
                            501 ;	genIpush
                            502 ; _saveRegsForCall: sendSetSize: 0 deInUse: 0 bcInUse: 0 deSending: 0
                            503 ;	AOP_STK for 
   0159 F8 02               504 	lda	hl,2(sp)
   015B 7E                  505 	ld	a,(hl)
   015C F5                  506 	push	af
   015D 33                  507 	inc	sp
                            508 ;	genIpush
   015E 3E 00               509 	ld	a,#0x00
   0160 F5                  510 	push	af
   0161 33                  511 	inc	sp
                            512 ;	genCall
   0162 CD 00 00            513 	call	_set_sprite_tile
   0165 E8 02               514 	lda	sp,2(sp)
                            515 ;	movecursor.c 93
                            516 ;	genIpush
                            517 ; _saveRegsForCall: sendSetSize: 0 deInUse: 0 bcInUse: 0 deSending: 0
                            518 ;	AOP_HL for _y
   0167 21 01 00            519 	ld	hl,#_y
   016A 7E                  520 	ld	a,(hl)
   016B F5                  521 	push	af
   016C 33                  522 	inc	sp
                            523 ;	genIpush
                            524 ;	AOP_HL for _x
   016D 21 00 00            525 	ld	hl,#_x
   0170 7E                  526 	ld	a,(hl)
   0171 F5                  527 	push	af
   0172 33                  528 	inc	sp
                            529 ;	genIpush
   0173 3E 00               530 	ld	a,#0x00
   0175 F5                  531 	push	af
   0176 33                  532 	inc	sp
                            533 ;	genCall
   0177 CD 00 00            534 	call	_move_sprite
   017A E8 03               535 	lda	sp,3(sp)
                            536 ;	movecursor.c 94
                            537 ;	genIpush
                            538 ; _saveRegsForCall: sendSetSize: 0 deInUse: 0 bcInUse: 0 deSending: 0
   017C 21 0A 00            539 	ld	hl,#0x000A
   017F E5                  540 	push	hl
                            541 ;	genCall
   0180 CD 00 00            542 	call	_delay
   0183 E8 02               543 	lda	sp,2(sp)
                            544 ;	genLabel
   0185                     545 00101$:
                            546 ;	genEndFunction
                            547 	
   0185 C9                  548 	ret
   0186                     549 ___moveCursor_end:
                            550 	.area _CODE
ASxxxx Assembler V01.75  (GameBoy Z80-like CPU), page 1.

Symbol Table

  0 ___controlCursor_end               0159 R
  0 ___controlCursor_start             0091 R
  0 ___main_end                        0034 R
  0 ___main_start                      0000 R
  0 ___moveCursor_end                  0186 R
  0 ___moveCursor_start                0159 R
  0 ___setupCursor_end                 0091 R
  0 ___setupCursor_start               004B R
    __initrleblock                     **** GX
  0 __str_0                            0034 R
  0 _controlCursor                     0091 GR
  1 _cursor                            0002 GR
    _delay                             **** GX
    _joypad                            **** GX
  0 _main                              0000 GR
  0 _moveCursor                        0159 GR
    _move_sprite                       **** GX
    _printf                            **** GX
    _set_sprite_data                   **** GX
    _set_sprite_tile                   **** GX
  0 _setupCursor                       004B GR
  1 _x                                 0000 GR
  1 _y                                 0001 GR

ASxxxx Assembler V01.75  (GameBoy Z80-like CPU), page 2.

Area Table

   0 _CODE                              size  186   flags 0
   1 _DATA                              size   82   flags 0
   2 _OVERLAY                           size    0   flags 0
   3 _ISEG                              size    0   flags 0
   4 _BSEG                              size    0   flags 0
   5 _XSEG                              size    0   flags 0
   6 _GSINIT                            size   89   flags 0
   7 _GSFINAL                           size    0   flags 0
   8 _HOME                              size    0   flags 0
